# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kmeans_pb2 as kmeans__pb2


class KMeansClusterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendDataToMapper = channel.unary_unary(
                '/kmeans.KMeansCluster/SendDataToMapper',
                request_serializer=kmeans__pb2.MapperRequest.SerializeToString,
                response_deserializer=kmeans__pb2.MapperResponse.FromString,
                )
        self.ReceiveUpdatedCentroids = channel.unary_unary(
                '/kmeans.KMeansCluster/ReceiveUpdatedCentroids',
                request_serializer=kmeans__pb2.ReducerResponse.SerializeToString,
                response_deserializer=kmeans__pb2.Acknowledgement.FromString,
                )
        self.ProcessDataForReducer = channel.unary_unary(
                '/kmeans.KMeansCluster/ProcessDataForReducer',
                request_serializer=kmeans__pb2.ReducerRequest.SerializeToString,
                response_deserializer=kmeans__pb2.ReducerResponse.FromString,
                )
        self.send_intermediate_values_to_reducer = channel.unary_unary(
                '/kmeans.KMeansCluster/send_intermediate_values_to_reducer',
                request_serializer=kmeans__pb2.IntermediateRequest.SerializeToString,
                response_deserializer=kmeans__pb2.IntermediateResponse.FromString,
                )


class KMeansClusterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendDataToMapper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveUpdatedCentroids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessDataForReducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_intermediate_values_to_reducer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KMeansClusterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendDataToMapper': grpc.unary_unary_rpc_method_handler(
                    servicer.SendDataToMapper,
                    request_deserializer=kmeans__pb2.MapperRequest.FromString,
                    response_serializer=kmeans__pb2.MapperResponse.SerializeToString,
            ),
            'ReceiveUpdatedCentroids': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveUpdatedCentroids,
                    request_deserializer=kmeans__pb2.ReducerResponse.FromString,
                    response_serializer=kmeans__pb2.Acknowledgement.SerializeToString,
            ),
            'ProcessDataForReducer': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessDataForReducer,
                    request_deserializer=kmeans__pb2.ReducerRequest.FromString,
                    response_serializer=kmeans__pb2.ReducerResponse.SerializeToString,
            ),
            'send_intermediate_values_to_reducer': grpc.unary_unary_rpc_method_handler(
                    servicer.send_intermediate_values_to_reducer,
                    request_deserializer=kmeans__pb2.IntermediateRequest.FromString,
                    response_serializer=kmeans__pb2.IntermediateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kmeans.KMeansCluster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KMeansCluster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendDataToMapper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansCluster/SendDataToMapper',
            kmeans__pb2.MapperRequest.SerializeToString,
            kmeans__pb2.MapperResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveUpdatedCentroids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansCluster/ReceiveUpdatedCentroids',
            kmeans__pb2.ReducerResponse.SerializeToString,
            kmeans__pb2.Acknowledgement.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessDataForReducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansCluster/ProcessDataForReducer',
            kmeans__pb2.ReducerRequest.SerializeToString,
            kmeans__pb2.ReducerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_intermediate_values_to_reducer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kmeans.KMeansCluster/send_intermediate_values_to_reducer',
            kmeans__pb2.IntermediateRequest.SerializeToString,
            kmeans__pb2.IntermediateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
